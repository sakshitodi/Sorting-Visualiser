# -*- coding: utf-8 -*-
"""Sorting_visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xKD13Wc0vdf0cSpo9rIXG320Zp5bcIaP

# **Bubble Sort**
"""

import matplotlib.pyplot as plt

import numpy as np

num = int(input("Enter the list size:"))

arr = np.random.randint(0, 100, num)
x = np.arange(0, num, 1)

n = len(arr)
 
swapped = False
  
for i in range(n-1):
       
    for j in range(0, n-i-1):
        plt.bar(x,arr)
        plt.pause(0.01)
        plt.clf()
            
        if arr[j] > arr[j + 1]:
            swapped = True
            arr[j], arr[j + 1] = arr[j + 1], arr[j]

    if not swapped:
        break

plt.show()

"""# **Merge Sort**"""

num= int(input("Array Size:"))
def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r - m
    L = [0] * (n1)
    R = [0] * (n2)
    for i in range(0, n1):
        L[i] = arr[l + i]
 
    for j in range(0, n2):
        R[j] = arr[m + 1 + j]
 
    i = 0     
    j = 0     
    k = l     
 
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1
 
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1
 
    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1
 

 
 
def mergeSort(arr, l, r):
    if l < r:
 
        
        m = l+(r-l)//2
        plt.bar(list(range(num)),arr)
        plt.pause(0.01)
        plt.clf()
        mergeSort(arr, l, m)
        mergeSort(arr, m+1, r)
        plt.bar(list(range(num)),arr)
        plt.pause(0.01)
        plt.clf()
        merge(arr, l, m, r)
        plt.bar(list(range(num)),arr)
        plt.pause(0.01)
        plt.clf()

arr = np.random.randint(0, 100, num)
mergeSort(arr,0,num-1)
plt.show()

